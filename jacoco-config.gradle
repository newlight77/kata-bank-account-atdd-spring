apply plugin: 'jacoco'

jacocoTestReport {

    group = "Reporting"
    description = "Generate Jacoco coverage reports"

//    def coverageSourceDirs = ["src/main/java"]
//    sourceDirectories = files(coverageSourceDirs)
//    additionalSourceDirs = files(coverageSourceDirs)

//    dependsOn = subprojects.test
//    additionalSourceDirs = files(subprojects.sourceSets.main.allSource.srcDirs)
//    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
//    classDirectories =  files(subprojects.sourceSets.main.output)
//    executionData = files(subprojects.jacocoTestReport.executionData)

//    executionData = files('${buildDir}/jacoco/${name}.exec')
//    executionData = fileTree(dir: project.projectDir, includes: ["**/*.exec", "**/*-it.exec"])

    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacoco/Html")
    }

    classDirectories = fileTree(
        dir: "${project.buildDir}/classes/java/main",
        excludes: ['**/model/*.class', '**/exception/*.class']
    )

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['com.newlight77.kata.bank.model.*', 'com.newlight77.kata.bank.exception.*'])
        }))
    }

    // Work-around to allow us to build list of executionData files in doFirst
    onlyIf = {
        true
    }

    /*
     * Builds list of source dirs, class dirs, and executionData files
     * when task is run, not at script evaluation time
     */
    doFirst {
        subprojects.findAll { subproject ->
            subproject.pluginManager.hasPlugin('java')
        }.each { subproject ->
            additionalSourceDirs files(subproject.sourceSets.main.allJava.srcDirs)
            additionalClassDirs (subproject.sourceSets.main.output)
            if (subproject.pluginManager.hasPlugin('jacoco')) {
                executionData subproject.tasks.jacocoTestReport.executionData
            }
        }

        executionData = files(executionData.findAll {
            it.exists()
        })
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = false
            element = 'CLASS'
            includes = ['com.newlight77.*']
            excludes = ['com.newlight77.kata.bank.model.*',
                        'com.newlight77.kata.bank.exception.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
//                value = 'COVEREDRATIO'
//                minimum = 0.8
                maximum = 0.3
            }
        }
    }
}
